name: Deploy to Production

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test || echo "No tests configured"
    
    - name: Create .env file
      run: |
        echo "FTP_HOST=${{ secrets.FTP_HOST }}" >> .env
        echo "FTP_PORT=${{ secrets.FTP_PORT }}" >> .env
        echo "FTP_USER=${{ secrets.FTP_USER }}" >> .env
        echo "FTP_PASS=${{ secrets.FTP_PASS }}" >> .env
        echo "FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> .env
        echo "FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}" >> .env
        echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
        echo "FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> .env
        echo "FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" >> .env
        echo "FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}" >> .env
        echo "FIREBASE_MEASUREMENT_ID=${{ secrets.FIREBASE_MEASUREMENT_ID }}" >> .env
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install python-dotenv
    
    - name: Deploy to FTP
      run: python deploy.py all
      
    - name: Clean up
      if: always()
      run: rm -f .env